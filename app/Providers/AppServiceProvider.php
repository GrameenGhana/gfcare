<?php

namespace App\Providers;

use App\Team;
use App\Spark;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Meta-data included in invoices generated by Spark.
     *
     * @var array
     */
    protected $invoiceWith = [
        'vendor' => 'Grameen Foundation',
        'product' => 'GF+Care',
        'street' => '1400 K Street, NW, Suite 550',
        'location' => 'Washington, D.C. 20005',
        'phone' => '+1 202-628-3560',
    ];

    /**
     * Automatically support two-factor authentication.
     *
     * @var bool
     */
    protected $twoFactorAuth = false;

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        Spark::defaultPhoneCode('233');
        
        // set default to Accra
        Spark::defaultLatitude('5.6037');
        Spark::defaultLongitude('0.1870');
        
        Spark::defaultSMSLink('http://localhost/gfcare/mobile-midwife/messages/sms/?content=[CONTENT]&to=[TO]');
        Spark::defaultVoiceLink('http://localhost/gfcare/mobile-midwife/messages/voice/?content=[CONTENT]&to=[TO]');

        $this->app['validator']->resolver(function ($translator, $data, $rules, $messages) {
            return new \App\Validators\LocationParentValidator($translator, $data, $rules, $messages);
        });
        
        if (method_exists($this, 'customizeSpark')) {
            $this->customizeSpark();
        }

        if (method_exists($this, 'customizeRegistration')) {
            $this->customizeRegistration();
        }

        if (method_exists($this, 'customizeRoles')) {
            $this->customizeRoles();
        }

        if (method_exists($this, 'customizeProfileUpdates')) {
            $this->customizeProfileUpdates();
        }

        if (method_exists($this, 'customizeSubscriptionPlans')) {
            $this->customizeSubscriptionPlans();
        }

        if (method_exists($this, 'customizeToolModules')) {
            $this->customizeToolModules();
        }
        
        if (method_exists($this, 'customizeLocationTypes')) {
            $this->customizeLocationTypes();
        }
        
        if (method_exists($this, 'customizeSettingsTabs')) {
            $this->customizeSettingsTabs();
        }

        if ($this->twoFactorAuth) {
            Spark::withTwoFactorAuth();
        }

        Spark::generateInvoicesWith($this->invoiceWith);
    }

    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        //
    }


    /**
     * Customize general Spark options.
     *
     * @return void
     */
    protected function customizeSpark()
    {
        Spark::configure([
            'models' => [
                'teams' => Team::class,
            ]
        ]);
    }

    /**
     * Customize Spark's new user registration logic.
     *
     * @return void
     */
    protected function customizeRegistration()
    {
        // Spark::validateRegistrationsWith(function (Request $request) {
        //     return [
        //         'name' => 'required|max:255',
        //         'email' => 'required|email|unique:users',
        //         'password' => 'required|confirmed|min:6',
        //         'terms' => 'required|accepted',
        //     ];
        // });

        // Spark::validateSubscriptionsWith(function (Request $request) {
        //     return [
        //         'plan' => 'required',
        //         'terms' => 'required|accepted',
        //         'stripe_token' => 'required',
        //     ];
        // });

        // Spark::createUsersWith(function (Request $request) {
        //     // Return New User Instance...
        // });
    }

    /**
     * Customize the roles that may be assigned to team members.
     *
     * @return void
     */
    protected function customizeRoles()
    {
        Spark::defaultRole('member');

        Spark::roles([
            'owner' => 'Administrator',
            'editor' => 'Content Editor',
            'member' => 'Member',
            'project' => 'Project',
        ]);
    }

    /**
     * Customize the tabs on the settings screen.
     *
     * @return void
     */
    protected function customizeSettingsTabs()
    {
        Spark::settingsTabs()->configure(function ($tabs) {
            return [
                $tabs->profile(),
                $tabs->teams(),
                $tabs->security(),
                $tabs->subscription(),
                // $tabs->make('Name', 'view', 'fa-icon'),
            ];
        });

        Spark::teamSettingsTabs()->configure(function ($tabs) {
            return [
                $tabs->owner(),
                $tabs->user(),
                $tabs->membership(),
                $tabs->device(),
                $tabs->location(),
                $tabs->module(),
                $tabs->userLog()
                // $tabs->make('Name', 'view', 'fa-icon'),
            ];
        });
    }

    /**
     * Customize Spark's profile update logic.
     *
     * @return void
     */
    protected function customizeProfileUpdates()
    {
        // Spark::validateProfileUpdatesWith(function (Request $request) {
        //     return [
        //         'name' => 'required|max:255',
        //         'email' => 'required|email|unique:users,email,'.$request->user()->id,
        //     ];
        // });

        // Spark::updateProfilesWith(function (Request $request) {
        //     // Update $request->user()...
        // });
    }

    /**
     * Customize the subscription plans for the application.
     *
     * @return void
     */
    protected function customizeSubscriptionPlans()
    {
        /*
       Spark::free()
                ->features([
                    'Feature 1',
                    'Feature 2',
                    'Feature 3',
                ]);
         
        Spark::plan('Spark Test 1', 'spark-test-1')->price(9.99)
                ->trialDays(15)
                ->features([
                    'Feature 1',
                    'Feature 2',
                    'Feature 3',
                ]);
                
        */      
    }
    
    /**
     * Customize the tool modules for the application.
     *
     * @return void
     */
    protected function customizeToolModules()
    {
        Spark::module('Mobile Midwife', 'gfcare-module-1')
                        ->description("A maternal and child health behaviour change messaging platform.")
                        ->module_path('MobileMidwife')
                        ->menu_name('Mobile Midwife');
        
        Spark::module('CHN On The Go', 'gfcare-module-2')
                        ->description("A health provider mlearning tool and job aid tool.")
                        ->module_path('CCH')
                        ->menu_name("CHN-On-The-Go")
                        ->menu_slug("chn-on-the-go");
                       

        
        Spark::module('MobiHealth Volunteer', 'gfcare-module-3')
                        ->description("A health provider mlearning tool and job aid tool.")
                        ->module_path('MobiHealth')
                        ->menu_name("MobiHealth")
                        ->menu_slug("mobihealth");
        
        Spark::module('NoYawa', 'gfcare-module-4')
                        ->description("A sexual reproductive health information app")
                        ->module_path('Noyawa')
                        ->menu_name("No Yawa");
        
        Spark::module('Linda', 'gfcare-module-5')->hidden()
                        ->description('A tool to track availability of hospital beds')
                        ->module_path('Linda')
                        ->menu_name('Linda')
                        ->menu_slug('linda');
        
        foreach(Spark::modules() as $module) {
            if ($module->isActive()) {
                // Load the routes for each of the modules
                if(file_exists(__DIR__.'/../Gfcare/src/'.$module->module_path.'/routes.php')) {
                    include __DIR__.'/../Gfcare/src/'.$module->module_path.'/routes.php';
                }

                $models = scandir(__DIR__.'/../Gfcare/src/'.$module->module_path.'/Models');
                foreach($models as $m) {
                    if (!in_array($m,array('.','..')) && !is_dir($m)) {
                        if(file_exists(__DIR__.'/../Gfcare/src/'.$module->module_path.'/Models/'.$m)) {
                            include __DIR__.'/../Gfcare/src/'.$module->module_path.'/Models/'.$m;
                        }
                    }
                }

                // Load the views
                if(is_dir(__DIR__.'/../Gfcare/src/'.$module->module_path.'/Resources/views')) {
                    $this->loadViewsFrom(__DIR__.'/../Gfcare/src/'.$module->module_path.'/Resources/views', $module->module_path);
                }
            }
        }
    }
    
        /**
     * Customize the roles that may be assigned to team members.
     *
     * @return void
     */
    protected function customizeLocationTypes()
    {
        // Location types in heirarichal order
        Spark::locationTypes([
            'Country',
            'County',
            'Sub-County',
            //'Sub-District',
            //'Type'
        ]);

        Spark::facilityTypes([
            'CHPS',
            'District Health Directorate',
            'District Hospital',
            'Health Center',
            'National Health Directorate',
            'Personal',
            'Polyclinic',
            'Regional Health Directorate',
            //'Type'
        ]);

        Spark::facilityGroupTypes([ 'CHPS Zone']);
    }


    protected function customizeLocation1Types()
    {
        // Location types in heirarichal order
        Spark::locationTypes([
            'Country',
            'Region',
            'District',
            'Sub-District',
            //'Type'
        ]);

        Spark::facilityTypes([
            'CHPS',
            'District Health Directorate',
            'District Hospital',
            'Health Center',
            'National Health Directorate',
            'Personal',
            'Polyclinic',
            'Regional Health Directorate',
            //'Type'
        ]);

        Spark::facilityGroupTypes([ 'CHPS Zone']);
    }
}
